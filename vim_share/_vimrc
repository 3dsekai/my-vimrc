source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

" ---------------------------------------------
" Set the font to Lucida Console
" ---------------------------------------------
"if has('gui_running')
"  set guifont=Lucida_Console:h11
"endif

" ---------------------------------------------
"
" Vundle plugin settings for GVim
"  https://github.com/VundleVim/Vundle.vim
"
" ---------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin('$HOME/vimfiles/bundle/')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
Plugin 'ascenator/L9', {'name': 'newL9'}
" gruvbox plugin install
Plugin 'morhetz/gruvbox'
" dracula plugin install
Plugin 'dracula/vim'
" nerdtree plugin install
Plugin 'scrooloose/nerdtree'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ---------------------------------------------
" display number lines
" ---------------------------------------------
set number

" ---------------------------------------------
" 
" Set font
"
" ---------------------------------------------
set encoding=utf-8
set guifont=Fantasque_Sans_Mono:h11

" ---------------------------------------------
" 
" Disable default Japanese input
"
" ---------------------------------------------
set iminsert=0  " disable default Japanese for insert mode
set imsearch=-1 " disable default Japanese for search (-1 sets imsearch to the same as iminsert)

" ---------------------------------------------
"
" Gruvbox colorscheme plugin
" https://github.com/morhetz/gruvbox
"
" ---------------------------------------------
" enable gruvbox color scheme
" colorscheme gruvbox

" Set color scheme ("dark" or "light")
" set background=dark

" ---------------------------------------------
"
" Dracula colorscheme plugin
" https://draculatheme.com/vim/
"
" ---------------------------------------------
" enable dracula color scheme
colorscheme dracula

" ---------------------------------------------
"
" NERDTree Plugin Settings
"
" ---------------------------------------------
" NERDTress File highlighting
" https://github.com/scrooloose/nerdtree/issues/433#issuecomment-92590696
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" call NERDTreeHighlightFile('c', 'Green', 'none', 'Green', '#282a36')
call NERDTreeHighlightFile('cpp', 'LightGreen', 'none', 'LightGreen', '#282a36')
call NERDTreeHighlightFile('h', 'LightRed', 'none', 'LightRed', '#282a36')
call NERDTreeHighlightFile('vert', 'Yellow', 'none', 'Yellow', '#282a36')
call NERDTreeHighlightFile('frag', 'Cyan', 'none', 'Cyan', '#282a36')
call NERDTreeHighlightFile('txt', 'LightMagenta', 'none', 'LightMagenta', '#282a36')

" toggle nerdtree on/off with f2
nnoremap <silent> <F2> :NERDTreeToggle<CR>
" ---------------------------------------------
"
" Exuberant ctags settings
"
" ---------------------------------------------
" when there are more than one defintions for a
" function, remap the jump key to list them all
" so I can choose the correct one.
nnoremap <C-]> g<C-]>

" ---------------------------------------------
"
" Taglist plugin settings
"
" ---------------------------------------------
let Tlist_Close_On_Select = 1 "close taglist window once we selected something
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_Auto_Highlight_Tag = 1 "Automatically highlight the current tag in the taglist.
let Tlist_Auto_Update = 1 "Automatically update the taglist to include newly edited files.
let Tlist_Close_On_Select = 1 "Close the taglist window when a file or tag is selected.
let Tlist_Show_One_File = 1 "Show tags for the only one file.
let Tlist_Inc_Winwidth = 1 "Increase the Vim window width to accommodate the taglist window
let Tlist_Display_Prototype = 1 "display full prototype instead of just function name
let Tlist_Process_File_Always = 1 "even without taglist window, create tags file, required for displaying tag in statusline
let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window

" remap the taglist toggle command to F8
nnoremap <silent> <F3> :TlistToggle<CR>

" ---------------------------------------------
"
" Highlight the current line
"
" ---------------------------------------------
set cursorline

" ---------------------------------------------
"
" Tabs
"
" ---------------------------------------------
set showtabline=2	" always display tab bar
set guitablabel=%N:%M%t " Show tab numbers
set tabstop=4		" set the width of a tab to be equivalent to 4 spaces

" ---------------------------------------------
"
" Display whitespace as characters
" for more info, type: help listchars
"
" ---------------------------------------------
" display tabs as: >-, and single/trailing whitespace as: ·
set list
set listchars=tab:>-,space:·,trail:·

" ---------------------------------------------
"
" Turn off temp backup files for Vim documents
"
" ---------------------------------------------
set nobackup	"don't create a document backup
set noundofile	"don't create unto file for document

" ---------------------------------------------
"
" maximize gvim window on start up for Windows
"
" ---------------------------------------------
autocmd GUIEnter * simalt ~x
